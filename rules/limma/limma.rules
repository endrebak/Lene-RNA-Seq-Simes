
rule run_limma:
    input:
        counts = "data/featurecounts/matrix_zero_rows_removed.txt",
        targets = "data/limma/targets.txt"
    output:
        "data/limma/ebayes.RDS"
    run:
        cmd = """
library("limma")
library("edgeR")

exp.mat = read.table("{input.counts}", sep="\\t", header=TRUE)
rownames(exp.mat) = exp.mat$Bin
exp.mat = exp.mat[-1]
colnames(exp.mat) = 1:64

#####
## Read design
####
targets <- read.table("{input.targets}", header=TRUE)
targets$Sample_ID <- sub("^(.)$", "S0\\1", sub("^(..)$", "S\\1", as.character(targets$Sample_ID)))
targets$EC <- substring(targets$EC, 1, 3)
targets$Layer <- sub("Deep", "D", targets$Layer)

###################################################
##Create design matrix
###################################################

levels.age <- levels(factor(targets$Age))
age <- factor(as.character(targets$Age), levels = levels.age)
levels.layer <- levels(factor(targets$Layer))
layer <- factor(as.character(targets$Layer), levels = levels.layer)
levels.EC <- levels(factor(targets$EC))
EC <- factor(as.character(targets$EC), levels = levels.EC)

ff <- factor(paste(EC, age, layer, sep="."))
#Making design matrix
des <- model.matrix(~0 + ff)
colnames(des) <- levels(ff)


###################################################
##Convert expression matrix to DGEList object using edgeR
###################################################

dge <- DGEList(counts=exp.mat)
dge <- calcNormFactors(dge, method="TMM")


###################################################
##Perform voom transformation and TMM and quantile normalization
###################################################

v2 <- voom(dge, des, normalize.method = "quantile", plot = TRUE)

exp.mat.voom2 <- voom(dge, normalize.method = "quantile", plot=TRUE)

#Fit linear model, voom transformation, TMM normalization and quantile normalization of data
mod2 <- lmFit(v2, des)

cmat <- makeContrasts(MedIIvsD = (Med.P02.II + Med.P09.II + Med.P23.II + Med.P45.II)/4 - (Med.P02.D + Med.P09.D + Med.P23.D + Med.P45.D)/4,
LatIIvsD = (Lat.P02.II + Lat.P09.II + Lat.P23.II + Lat.P45.II)/4 - (Lat.P02.D + Lat.P09.D + Lat.P23.D + Lat.P45.D)/4,
MedP02IIvsD = Med.P02.II - Med.P02.D, MedP09IIvsD = Med.P09.II - Med.P09.D, MedP23IIvsD = Med.P23.II - Med.P23.D, MedP45IIvsD = Med.P45.II - Med.P45.D,
LatP02IIvsD = Lat.P02.II - Lat.P02.D, LatP09IIvsD = Lat.P09.II - Lat.P09.D, LatP23IIvsD = Lat.P23.II - Lat.P23.D, LatP45IIvsD = Lat.P45.II - Lat.P45.D,
ECP02vsP09 = (Med.P02.II + Med.P02.D + Lat.P02.II +Lat.P02.D)/4 - (Med.P09.II + Med.P09.D + Lat.P09.II +Lat.P09.D)/4,
ECP02vsP23 = (Med.P02.II + Med.P02.D + Lat.P02.II +Lat.P02.D)/4 - (Med.P23.II + Med.P23.D + Lat.P23.II +Lat.P23.D)/4,
ECP02vsP45 = (Med.P02.II + Med.P02.D + Lat.P02.II +Lat.P02.D)/4 - (Med.P45.II + Med.P45.D + Lat.P45.II +Lat.P45.D)/4,
ECP09vsP23 = (Med.P09.II + Med.P09.D + Lat.P09.II +Lat.P09.D)/4 - (Med.P23.II + Med.P23.D + Lat.P23.II +Lat.P23.D)/4,
ECP09vsP45 = (Med.P09.II + Med.P09.D + Lat.P09.II +Lat.P09.D)/4 - (Med.P45.II + Med.P45.D + Lat.P45.II +Lat.P45.D)/4,
ECP23vsP45 = (Med.P23.II + Med.P23.D + Lat.P23.II +Lat.P23.D)/4 - (Med.P45.II + Med.P45.D + Lat.P45.II +Lat.P45.D)/4,
ECIIvsDeep = (Med.P02.II + Med.P09.II + Med.P23.II + Med.P45.II + Lat.P02.II + Lat.P09.II + Lat.P23.II + Lat.P45.II)/8 - (Med.P02.D + Med.P09.D + Med.P23.D + Med.P45.D + Lat.P02.D + Lat.P09.D + Lat.P23.D + Lat.P45.D)/8,
ECYoungvsOld = (Med.P02.II + Med.P09.II + Med.P02.D + Med.P09.D + Lat.P02.II + Lat.P09.II + Lat.P02.D + Lat.P09.D)/8 - (Med.P23.II + Med.P45.II + Med.P23.D + Med.P45.D + Lat.P23.II + Lat.P45.II + Lat.P23.D + Lat.P45.D)/8,
MedvsLat = (Med.P02.II + Med.P09.II + Med.P02.D + Med.P09.D + Med.P23.II + Med.P45.II + Med.P23.D + Med.P45.D)/8 - (Lat.P02.II + Lat.P09.II + Lat.P02.D + Lat.P09.D + Lat.P23.II + Lat.P45.II + Lat.P23.D + Lat.P45.D)/8,
LIIYoungvsOld = (Med.P02.II + Med.P09.II + Lat.P02.II + Lat.P09.II)/4 - (Med.P23.II + Med.P45.II + Lat.P23.II + Lat.P45.II)/4,
DeepYoungvsOld = (Med.P02.D + Med.P09.D + Lat.P02.D + Lat.P09.D)/4 - (Med.P23.D + Med.P45.D + Lat.P23.D + Lat.P45.D)/4,
MedYoungvsLatYoung = (Med.P02.II + Med.P09.II + Med.P02.D + Med.P09.D)/4 - (Lat.P02.II + Lat.P09.II + Lat.P02.D + Lat.P09.D)/4,
MedOldvsLatOld = (Med.P23.II + Med.P45.II + Med.P23.D + Med.P45.D)/4 - (Lat.P23.II + Lat.P45.II + Lat.P23.D + Lat.P45.D)/4,
MedLIIvsLatLII = (Med.P02.II + Med.P09.II + Med.P23.II + Med.P45.II)/4 - (Lat.P02.II + Lat.P09.II + Lat.P23.II + Lat.P45.II)/4,
MedDvsLatDeep = (Med.P02.D + Med.P09.D + Med.P23.D + Med.P45.D)/4 - (Lat.P02.D + Lat.P09.D + Lat.P23.D + Lat.P45.D)/4,
MedLIIYoungvsLatLIIYoung = (Med.P02.II + Med.P09.II)/2 - (Lat.P02.II + Lat.P09.II)/2,
MedLIIOldvsLatLIIOld = (Med.P23.II + Med.P45.II)/2 - (Lat.P23.II + Lat.P45.II)/2,
MedLIIYoungvsMedLIIOld = (Med.P02.II + Med.P09.II)/2 - (Med.P23.II + Med.P45.II)/2,
MedDYoungvsMedDOld = (Med.P02.D + Med.P09.D)/2 - (Med.P23.D + Med.P45.D)/2,
MedYoungvsMedOld = (Med.P02.II + Med.P09.II + Med.P02.D + Med.P09.D)/4 - (Med.P23.II + Med.P45.II + Med.P23.D + Med.P45.D)/4,
LatLIIYoungvsLatLIIOld = (Lat.P02.II + Lat.P09.II)/2 - (Lat.P23.II + Lat.P45.II)/2,
LatDYoungvsLatDOld = (Lat.P02.D + Lat.P09.D)/2 - (Lat.P23.D + Lat.P45.D)/2,
LatYoungvsLatOld = (Lat.P02.II + Lat.P09.II + Lat.P02.D + Lat.P09.D)/4 - (Lat.P23.II + Lat.P45.II + Lat.P23.D + Lat.P45.D)/4,
P02IIMedvsLat = Med.P02.II - Lat.P02.II, P09IIMedvsLat = Med.P09.II - Lat.P09.II, P23IIMedvsLat = Med.P23.II - Lat.P23.II, P45IIMedvsLat = Med.P45.II - Lat.P45.II,
P02DMedvsLat = Med.P02.D - Lat.P02.D, P09DMedvsLat = Med.P09.D - Lat.P09.D, P23DMedvsLat = Med.P23.D - Lat.P23.D, P45DMedvsLat = Med.P45.D - Lat.P45.D,
P02MedvsLat = (Med.P02.II + Med.P02.D)- (Lat.P02.II + Lat.P02.D), P09MedvsLat = (Med.P09.II + Med.P09.D)- (Lat.P09.II + Lat.P09.D),
P23MedvsLat = (Med.P23.II + Med.P23.D)- (Lat.P23.II + Lat.P23.D), P45MedvsLat = (Med.P45.II + Med.P45.D)- (Lat.P45.II + Lat.P45.D),
MedOldIIvsD = (Med.P23.II + Med.P45.II)/2 - (Med.P23.D + Med.P45.D)/2,
levels=des)

#Compute estimated coefficients and standard errors for my set of contrasts, TMM and quantile normalization

fit.TMMQua <- contrasts.fit(mod2, cmat)
#Empirical Bayes moderation of standard errors
fit2.TMMQua <- eBayes(fit.TMMQua)

saveRDS(fit2.TMMQua, file = "{output[0]}")
        """.format(**vars())

        print(cmd)
        R(cmd)


rule extract_toptables:
    input:
        "data/limma/ebayes.RDS"
    output:
        ["data/limma/toptables/{}.csv".format(f) for f in "ECIIvsD OvsY MECvsLEC MP02 MP09 MP23 MP45 LP02 LP09 LP23 LP45 IIP02 IIP09 IIP23 IIP45 DP02 DP09 DP23 DP45".split()]
    run:

        cmd = """
library(limma)
fitLene <- readRDS("{input[0]}")

ECIIvsD <- topTable(fitLene, coef = "ECIIvsDeep", p.value = 1, lfc = 0, number = Inf)
OvsY <- topTable(fitLene, coef = "ECYoungvsOld", p.value = 1, lfc = 0, number = Inf)
MECvsLEC <- topTable(fitLene, coef = "MedvsLat", p.value = 1, lfc = 0, number = Inf)

##MEC Layer II vs. Deep
MP02 <- topTable(fitLene, coef = "MedP02IIvsD", p.value = 1, lfc = 0, number = Inf)
MP09 <- topTable(fitLene, coef = "MedP09IIvsD", p.value = 1, lfc = 0, number = Inf)
MP23 <- topTable(fitLene, coef = "MedP23IIvsD", p.value = 1, lfc = 0, number = Inf)
MP45 <- topTable(fitLene, coef = "MedP45IIvsD", p.value = 1, lfc = 0, number = Inf)

##LEC Layer II vs. Deep
LP02 <- topTable(fitLene, coef = "LatP02IIvsD", p.value = 1, lfc = 0, number = Inf)
LP09 <- topTable(fitLene, coef = "LatP09IIvsD", p.value = 1, lfc = 0, number = Inf)
LP23 <- topTable(fitLene, coef = "LatP23IIvsD", p.value = 1, lfc = 0, number = Inf)
LP45 <- topTable(fitLene, coef = "LatP45IIvsD", p.value = 1, lfc = 0, number = Inf)

##Layer II LEC v MEC
IIP02 <- topTable(fitLene, coef = "P02IIMedvsLat", p.value = 1, lfc = 0, number = Inf)
IIP09 <- topTable(fitLene, coef = "P09IIMedvsLat", p.value = 1, lfc = 0, number = Inf)
IIP23 <- topTable(fitLene, coef = "P23IIMedvsLat", p.value = 1, lfc = 0, number = Inf)
IIP45 <- topTable(fitLene, coef = "P45IIMedvsLat", p.value = 1, lfc = 0, number = Inf)

##Layer D LEC v MEC
DP02 <- topTable(fitLene, coef = "P02DMedvsLat", p.value = 1, lfc = 0, number = Inf)
DP09 <- topTable(fitLene, coef = "P09DMedvsLat", p.value = 1, lfc = 0, number = Inf)
DP23 <- topTable(fitLene, coef = "P23DMedvsLat", p.value = 1, lfc = 0, number = Inf)
DP45 <- topTable(fitLene, coef = "P45DMedvsLat", p.value = 1, lfc = 0, number = Inf)


write.table(ECIIvsD, file="data/limma/toptables/ECIIvsD.csv")
write.table(OvsY, file="data/limma/toptables/OvsY.csv")
write.table(MECvsLEC, file="data/limma/toptables/MECvsLEC.csv")

write.table(MP02, file="data/limma/toptables/MP02.csv")
write.table(MP09, file="data/limma/toptables/MP09.csv")
write.table(MP23, file="data/limma/toptables/MP23.csv")
write.table(MP45, file="data/limma/toptables/MP45.csv")

write.table(LP02, file="data/limma/toptables/LP02.csv")
write.table(LP09, file="data/limma/toptables/LP09.csv")
write.table(LP23, file="data/limma/toptables/LP23.csv")
write.table(LP45, file="data/limma/toptables/LP45.csv")

write.table(IIP02, file="data/limma/toptables/IIP02.csv")
write.table(IIP09, file="data/limma/toptables/IIP09.csv")
write.table(IIP23, file="data/limma/toptables/IIP23.csv")
write.table(IIP45, file="data/limma/toptables/IIP45.csv")

write.table(DP02, file="data/limma/toptables/DP02.csv")
write.table(DP09, file="data/limma/toptables/DP09.csv")
write.table(DP23, file="data/limma/toptables/DP23.csv")
write.table(DP45, file="data/limma/toptables/DP45.csv")
""".format(**vars())

        print(cmd)

        R(cmd)
